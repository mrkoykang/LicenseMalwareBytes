import logging
import json
import ssl
from OpenSSL import crypto
from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn

import config

logger = logging.getLogger(__name__)

class Keystone:
  # ...
  
class ProxyRequestHandler(BaseHTTPRequestHandler):

  def __init__(self):
    self.initialize_tls()

  def initialize_tls(self):
    # Load certs
    self.load_certs()
    
    # Initialize connection pool 
    self.connections = {}

  def load_certs(self):
    try:
      # Load CA and client certs
    except Exception as e:
      logger.error("Error loading certs")

  def do_request(self):

    try:
      # Validate and parse request  
      
      if path == '/register':
        self.handle_register()
      elif path == '/check':
        self.handle_check()
      
      # Forward request  
      response = self.forward_request()
      
    except Exception as e:
      logger.error(f"Error handling request: {e}")
      self.send_error()
      
    else:  
      # Validate and send response
      try:
         self.send_response(response)  
      except EncodingError:
         logger.error("Encoding error")

  def forward_request(self):
    # Make request and return response

  def handle_register(self):
    # Handle register request 
   
    try:
      data = json.loads(request) 
    except JSONDecodeError:
      return self.send_error(400)

    # Validate and process request

  def send_response(self, response):
    #Encode, filter headers and send response

  def send_error(self, code=500):
     # Send error response

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):

  def run(self):

    logger.info("Starting server...")

    try:
      HTTPServer.serve_forever(self)

    except KeyboardInterrupt:
      logger.info("Shutting down...")
     
if __name__ == '__main__':

  config.load()  
  server = ThreadedHTTPServer((config.HOST, config.PORT), ProxyRequestHandler)
  server.run()